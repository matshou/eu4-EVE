
###############################
# EVE - Governance Policy
###############################

# List of flags:
# ====================
#  policy_gov_neutral			#
#  policy_gov_centralized		# all
#  policy_gov_decentralized		# country
#  policy_gov_time_months		# scope
#  policy_gov_time_years		#

# List of variables:
# ====================
#  policy_gov_min
#  policy_gov_max
#  policy_gov_val			# current rating value for this policy
#  policy_gov_rating		# short numerical for 'policy_gov_val'
#  policy_gov_mod			# modifier monthly applied to rating
#  policy_gov_gui_val		# same as 'policy_gov_val' but used by GUI only
#  policy_gov_rul_mod		# from ruler administrative skill
#  policy_gov_adv_mod		# from advisor administrative skill
#  policy_gov_time			# months or years until rating change

# Re-initialize policy values that display in GUI.
# This is called immediately after loading a game to initialize variables
# with null values that have not been written in the save game file
# @scope country
#
governance.reinit_values = {

	if = {
		limit = { is_var_null = { var = policy_gov_max } }
		set_variable = { which = policy_gov_max value = 0 }
	}
	if = {
		limit = { is_var_null = { var = policy_gov_gui_val } }
		set_variable = { which = policy_gov_gui_val value = 0 }
	}
}


# Called from initialization phase for every country
# @scope country
#
governance.init_policy = {

	set_variable = { which = policy_gov_min value = -50 }
	set_variable = { which = policy_gov_max value = 50 }
	set_variable = { which = policy_gov_val value = 0 }        # These are base values,
	set_variable = { which = policy_gov_rating value = 0 }     # DO NOT CHANGE!
	set_variable = { which = policy_gov_mod value = 0 }

	set_country_flag = policy_gov_neutral

	# TODO: Implement max values for more governments, and set initial value
	#       different for all governments (could be random value below maximum)

	trigger_switch = {
		on_trigger = government

	# Monarchies
		despotic_monarchy = { set_variable = { which = policy_gov_max value = 20 } }
		feudal_monarchy = { set_variable = { which = policy_gov_max value = 0 } }
		administrative_monarchy = { set_variable = { which = policy_gov_max value = 30 } }

	# Republics
		noble_republic = { set_variable = { which = policy_gov_max value = 10 } }
		merchant_republic = { set_variable = { which = policy_gov_max value = 0 } }
		administrative_republic = { set_variable = { which = policy_gov_max value = 30 } }

	# Tribal
		tribal = { set_variable = { which = policy_gov_max value = -20 } }
	}

	# Clamp policy value according to max value
	if = {
		limit = { check_variable = { which = policy_gov_val which = policy_gov_max } }
		set_variable = { which = policy_gov_val which = policy_gov_max }
		set_variable = { which = policy_gov_rating which = policy_gov_val }
	}

	# Initialize GUI values here so we don't get errors
	set_variable = { which = policy_gov_gui_val which = policy_gov_val }

	# Set policy as active and add to GUI
	add_active_policy = governance.policy_neutral
}

# Update policy modifiers, rating and GUI values
# @scope country
#
governance.update_policy = {

	# Reset the modifier so we can recalculate it
	set_variable = { which = policy_gov_mod value = 0 }

	# Calculate modifier to add to rating
	governance.calc_policy_mod = yes

	if = {
		# Update only if modifier would affect policy
		limit = { is_var_not_null = { var = policy_gov_mod } }
		if = {
			limit = { governance.is_centralizing = yes }
			if = {
				limit = { governance.is_max_centralized = no }
				change_variable = { which = policy_gov_val which = policy_gov_mod }

				if = { # Do not allow value to go above maximum
					limit = { governance.is_above_max = yes }
					set_variable = { which = policy_gov_val which = policy_gov_max }
				}
				governance.update_rating = yes
				governance.calc_policy_time  = yes
			}
			else = { set_variable = { which = policy_gov_mod value = 0 } }
		}
		else = {	# decentralizing
			if = {
				limit = { governance.is_max_decentralized = no }
				change_variable = { which = policy_gov_val which = policy_gov_mod }

				if = { # Do not allow value to go below minimum
					limit = { governance.is_below_min = yes }
					set_variable = { which = policy_gov_val which = policy_gov_min }
				}
				governance.update_rating = yes
				governance.calc_policy_time  = yes
			}
			else = { set_variable = { which = policy_gov_mod value = 0 } }
		}
	}

	set_variable = { which = policy_gov_gui_val which = policy_gov_val }
	governance.round_values = yes
}

# Reset and calculate all policy modifiers.
# Should be called on each monthly pulse update
# @access private
# @scope country
#
governance.calc_policy_mod = {

	# Variables with "_mod" suffix below are used in localisation
	# to give information about modifiers affecting policy change each month

	multiply_variable = { which = policy_gov_state_adm_mod value = 0.125 }			# state admin
	change_variable = { which = policy_gov_mod which = policy_gov_state_adm_mod }	# min: 0, max: 0.125

	export_to_variable = { which = stability_mod value = stability }			# stability
	multiply_variable = { which = stability_mod value = 0.025 }					# min: -0.075, max: 0.075
	change_variable = { which = policy_gov_mod which = stability_mod }

	export_to_variable = { which = corruption_mod value = corruption }			# corruption
	multiply_variable = { which = corruption_mod value = -0.003 }				# min: 0, max: -0.3
	change_variable = { which = policy_gov_mod which = corruption_mod }

	export_to_variable = { which = autonomy_mod value = average_autonomy }		# autonomy
	multiply_variable = { which = autonomy_mod value = -0.008 }					# min: 0, max: -0.8
	change_variable = { which = policy_gov_mod which = autonomy_mod }

	if = {
		limit = { is_part_of_hre = yes }
		change_variable = { which = policy_gov_mod value = -0.05 }
	}
	if = {
		limit = { nation.has_lone_regency = yes }
		if = {
			limit = { has_heir = yes }										# regency council
			change_variable = { which = policy_gov_mod value = -0.05 }
		}
		else = {															# interregnum
			change_variable = { which = policy_gov_mod value = -0.65 }
		}
	}																					 # ruler skill
	else = { change_variable = { which = policy_gov_mod which = policy_gov_rul_mod } }	 # min: 0, max: 0.147

	# Advisor's Administrative Skill
	if = {
		limit = { advisor = master_of_mint }
		get_mint_advisor_lvl = yes

		math.calculate_progressive_mod = {									# advisor skill
			val = output_var steps = 5 mod = 0.015							# min: 0, max: 0.091
			inc = 0.004 output = policy_gov_adv_mod
		}
		change_variable = { which = policy_gov_mod which = policy_gov_adv_mod }
	}
	else_if = {
		limit = { is_var_not_null = { var = policy_gov_adv_mod } }
		set_variable = { which = policy_gov_adv_mod value = 0 }
	}
}

# Update rating value and country modifiers
# @access private
# @scope country
#
governance.update_rating = {

	if = {
		limit = { has_country_flag = policy_gov_neutral }   # Rating: 0
		if = {
			limit = { check_variable = { which = policy_gov_val value = 5 } }
			set_variable = { which = policy_gov_rating value = 1 }
			set_country_flag = policy_gov_centralized                   # just became centralized
			clr_country_flag = policy_gov_neutral
		}
		else_if = {
			limit = { is_var_less_than_val = { var = policy_gov_val val = -4.999 } }
			set_variable = { which = policy_gov_rating value = -1 }
			set_country_flag = policy_gov_decentralized                 # just became decentralized
			clr_country_flag = policy_gov_neutral
		}
	}
	else_if = {
		limit = { has_country_flag = policy_gov_centralized }
		if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = 1 } }	   # Rating: 1
			if = {
				limit = { check_variable = { which = policy_gov_val value = 15 } }
				set_variable = { which = policy_gov_rating value = 2 }
			}
			else_if = {
				limit = { is_var_less_than_val = { var = policy_gov_val val = 5 } }
				set_variable = { which = policy_gov_rating value = 0 }
				clr_country_flag = policy_gov_centralized					# no longer centralized
				set_country_flag = policy_gov_neutral
			}
		}
		else_if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = 2 } }	   # Rating: 2
			if = {
				limit = { check_variable = { which = policy_gov_val value = 25 } }
				set_variable = { which = policy_gov_rating value = 3 }
			}
			else_if = {
				limit = { is_var_less_than_val = { var = policy_gov_val val = 15 } }
				set_variable = { which = policy_gov_rating value = 1 }
			}
		}
		else_if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = 3 } }	   # Rating: 3
			if = {
				limit = { check_variable = { which = policy_gov_val value = 35 } }
				set_variable = { which = policy_gov_rating value = 4 }
			}
			else_if = {
				limit = { is_var_less_than_val = { var = policy_gov_val val = 25 } }
				set_variable = { which = policy_gov_rating value = 2 }
			}
		}
		else_if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = 4 } }	   # Rating: 4
			if = {
				limit = { check_variable = { which = policy_gov_val value = 45 } }
				set_variable = { which = policy_gov_rating value = 5 }
			}
			else_if = {
				limit = { is_var_less_than_val = { var = policy_gov_val val = 35 } }
				set_variable = { which = policy_gov_rating value = 3 }
			}
		}
		else_if = {
			limit = { is_var_less_than_val = { var = policy_gov_val val = 45 } }	   # Rating: 5
			set_variable = { which = policy_gov_rating value = 4 }
		}
	}
	else_if = {
		limit = { has_country_flag = policy_gov_decentralized }
		if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = -1 } }	# Rating: -1
			if = {
				limit = { is_var_less_than_val = { var = policy_gov_val val = -14.999 } }
				set_variable = { which = policy_gov_rating value = -2 }
			}
			else_if = {
				limit = { check_variable = { which = policy_gov_val value = -4.999 } }
				set_variable = { which = policy_gov_rating value = 0 }
				clr_country_flag = policy_gov_decentralized					# no longer decentralized
				set_country_flag = policy_gov_neutral
			}
		}
		else_if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = -2 } }    # Rating: -2
			if = {
				limit = { is_var_less_than_val = { var = policy_gov_val val = -24.999 } }
				set_variable = { which = policy_gov_rating value = -3 }
			}
			else_if = {
				limit = { check_variable = { which = policy_gov_val value = -14.999 } }
				set_variable = { which = policy_gov_rating value = -1 }
			}
		}
		else_if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = -3 } }    # Rating: -3
			if = {
				limit = { is_var_less_than_val = { var = policy_gov_val val = -34.999 } }
				set_variable = { which = policy_gov_rating value = -4 }
			}
			else_if = {
				limit = { check_variable = { which = policy_gov_val value = -24.999 } }
				set_variable = { which = policy_gov_rating value = -2 }
			}
		}
		else_if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = -4 } }    # Rating: -4
			if = {
				limit = { is_var_less_than_val = { var = policy_gov_val val = -44.999 } }
				set_variable = { which = policy_gov_rating value = -5 }
			}
			else_if = {
				limit = { check_variable = { which = policy_gov_val value = -34.999 } }
				set_variable = { which = policy_gov_rating value = -3 }
			}
		}
		else_if = {
			limit = { check_variable = { which = policy_gov_val value = -44.999 } }		# Rating: -5
			set_variable = { which = policy_gov_rating value = -4 }
		}
	}
}

# Calculate time remaining until we change our policy rating
# based on current policy modifier value
# @access private
# @scope country
#
governance.calc_policy_time = {

	clr_country_flag = policy_gov_time_months
	clr_country_flag = policy_gov_time_years

	set_variable = { which = policy_gov_time which = policy_gov_rating }
	multiply_variable = { which = policy_gov_time value = 10 }

	if = {
		limit = { check_variable = { which = policy_gov_mod value = 0 } }  			# centralizing
		change_variable = { which = policy_gov_time value = 5 }
		subtract_variable = { which = policy_gov_time which = policy_gov_val }
	}
	else = {
		subtract_variable = { which = policy_gov_time value = 5 }					# decentralizing
		subtract_variable = { which = policy_gov_time which = policy_gov_val }
	}

	# If government is decentralizing the change time will
	# become a negative value which will mess up our calculation
	#
	divide_variable = { which = policy_gov_time which = policy_gov_mod }
	if = {
		limit = { is_var_less_than_val = { var = policy_gov_time val = 0 } }
		multiply_variable = { which = policy_gov_time value = -1 }
	}

	if = {
		limit = { check_variable = { which = policy_gov_time value = 12 } }
		divide_variable = { which = policy_gov_time value = 12 }
		set_country_flag = policy_gov_time_years
	}
	else = { set_country_flag = policy_gov_time_months }
}

# Used to display clean values in game UI.
# Do only for player to reduce CPU usage
# @scope country
#
governance.round_values = {

	if = {
		limit = { ai = no }

		math.round = { val = policy_gov_mod int = 2 }
		math.round = { val = policy_gov_gui_val int = 1 }
		math.ceil = { val = policy_gov_time int = 0 }
	}
}

# Called once every time a new ruler rises to throne
# @scope country
#
governance.calc_ruler_mod = {

	export_to_variable = { which = output_var value = trigger_value:adm }
	subtract_variable = { which = output_var value = 1 } # normalize

	if = {
		limit = {
			check_variable = { which = output_var value = 1 }
			has_regency = no
		}
		math.calculate_progressive_mod = {
			val = output_var steps = 6 mod = 0.022
			inc = 0.005 output = policy_gov_rul_mod
		}
	}
	else = {
		set_variable = { which = policy_gov_rul_mod value = 0 }
	}
}

# Advisor level cannot be exported as a variable so we have to
# find it with like this. Only call if master of mint advisor is hired
# @scope country
#
get_mint_advisor_lvl = {

	# Cannot use a trigger switch here because
	# for some odd reason the game crashes when we do

	if = { limit = { master_of_mint = 5 }
		set_variable = { which = output_var value = 5 }
	}
	else_if = { limit = { master_of_mint = 4 }
		set_variable = { which = output_var value = 4 }
	}
	else_if = { limit = { master_of_mint = 3 }
		set_variable = { which = output_var value = 3 }
	}
	else_if = { limit = { master_of_mint = 2 }
		set_variable = { which = output_var value = 2 }
	}
	else_if = { limit = { master_of_mint = 1 }
		set_variable = { which = output_var value = 1 }
	}
}
