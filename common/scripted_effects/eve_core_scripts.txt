
##################################
# EVE - Core Scripts
##################################

# List of flags:
# ====================
#  eve_initialized			# global
#  found_country			# global
#  round_to_negative		# country
#  is_initialized			# country
#  territorial_change		# country
#  conquered_capital		# province
#  distant_province			# province

# List of variables:
# ====================
#  counter_var				# used for while loops
#  counter2_var				# -||-
#  arg1_var					# used for methods that need input
#  arg2_var					# -||-
#  arg3_var					# -||-
#  arg4_var					# -||-
#  output_var				# used for methods that create output
#  normalize_var			# used in rounding method to normalize output
#  month_pulse_eta			# used as a counter for monthly pulses
#  country_id				# used as a substitude for 'province_id'
#  owner_id					# used by provinces to pair with 'country_id'

# Scope: country
# This fires once each month, use it to handle stuff that depend on monthly updates
# Note: ROOT scope here is the province caller. This is very useful for using vanilla
#		methods that only accept scope as argument (example: 'province_distance' condition)
#
on_monthly_pulse = {

	reset_monthly_pulse = yes
	check_for_territorial_change = yes
	update_gov_policy = yes

	# Triggers only for player, do all GLOBAL stuff here:
	if = {
		limit = { ai = no }

		# Check on each pulse to see if a new country formed
		every_country = {
			limit = { NOT = { has_country_flag = is_initialized } }
			initialize_country = yes
		}
	}

	# This triggers when the capital gets moved to another
	# province or the previous owner gets annexed
	if = {
		limit = { ROOT = { NOT = { is_capital = yes } } }
		ROOT = { on_is_no_longer_capital = yes }
	}
	# Do this when we run the mod for the FIRST TIME this campaign.
	# It has to be run from here because the ROOT scope is set to capital province.
	#
	else_if = {
		limit = { NOT = { had_global_flag = { flag = eve_initialized days = 32 } } }
		calc_country_dist_autonomy = yes
	}
	# Owner country has either gained new territory
	# or changed its capital province
	else_if = {
		limit = { has_country_flag = territorial_change }
		calc_country_dist_autonomy = yes
	}
}

# Scope: province
# Fired from province that stops being a nation's capital
#
on_is_no_longer_capital = {

	remove_province_triggered_modifier = monthly_pulse
	owner = {
		# This province was gained as a concession in a war or
		# for other reasons has ended up as territory of another country
		if = {
			limit = { ROOT = { has_province_flag = conquered_capital } }

			# Find capital province previous owner.
			# Normally we would do this by using 'previous_owner' variable,
			# but for some reason it gets set to null after loading a campaign

			ROOT = { export_owner_id_to_country_scope = yes }
			every_known_country = {

				export_country_id_to_prev_scope = yes

				# found province previous owner
				if = { limit = { PREV = { is_variable_equal = {
					which = output_var which = output_var } } }

					changed_capital_province = yes					# previous owner

					PREV = { 										# current owner
						set_country_flag = territorial_change
						fire_monthly_pulse = yes
					}
				}
			}
			# Previous owner has been annexed/integrated
			# This can also point to an error if the owner exists but is not listed as a 'known_country'
			# but this shouldn't happen and would be a bug on Paradox's side
			#if = {
			#	limit = { NOT = { has_country_flag = territorial_change } }
			#	log = "EVE: ERROR(conquered capital [Root.GetName] with unknown previous owner)"
			#}
			ROOT = { clr_province_flag = conquered_capital }
		}
		# Owner changed its capital province with diplomatic power or an event
		else = { changed_capital_province = yes }
	}
}

# Scope: country
# Round 'arg1_var' variable to 'arg2_var' decimal places
# This is used to display clean values in game UI
#
round_value_to_decimal = {
	if = {
		limit = { NOT = { check_variable = { which = arg1_var value = 0 } } }
		multiply_variable = { which = arg1_var value = -1 }
		set_country_flag = round_to_negative
	}
	set_variable = { which = counter_var value = 1 }
	set_variable = { which = counter2_var value = 1 }    # if 'arg1_var' >= 1
	while = {
		limit = { check_variable = { which = arg1_var which = counter2_var } }
		multiply_variable = { which = counter_var value = 10 }
		multiply_variable = { which = counter2_var value = 10 }
	}
	while = {
		limit = { check_variable = { which = arg2_var value = 1 } }
		multiply_variable = { which = arg1_var value = 10 }
		multiply_variable = { which = counter_var value = 10 }
		subtract_variable = { which = arg2_var value = 1 }
	}

	set_variable = { which = normalize_var which = counter_var }
	divide_variable = { which = normalize_var which = counter2_var }   # used to normalize value

	while = {
		limit = { NOT = { is_variable_equal = { which = counter_var value = -1 } } }
		if = {
			limit = { check_variable = { which = arg1_var which = counter_var } }
			change_variable = { which = counter_var value = 0.5 }
			if = {
				limit = { check_variable = { which = arg1_var which = counter_var } }
				change_variable = { which = counter_var value = 0.5 }
			}
			else = { change_variable = { which = counter_var value = -0.5 } }
			set_variable = { which = arg1_var which = counter_var }
			set_variable = { which = counter_var value = -1 }               # break loop
		}
		else = { subtract_variable = { which = counter_var value = 1 } }
	}
	divide_variable = { which = arg1_var which = normalize_var }   # normalize value
	if = {
		limit = { has_country_flag = round_to_negative }
		multiply_variable = { which = arg1_var value = -1 }
		clr_country_flag = round_to_negative
	}
}

# Scope: country
reset_monthly_pulse = {
	set_variable = { which = month_pulse_eta value = 30 }
}

# Scope: country
# The monthly pulse will fire the NEXT day in capital province
#
fire_monthly_pulse = {
	set_variable = { which = month_pulse_eta value = 0 }
	#log = "EVE: [This.GetName] ordered an immediate monthly pulse"  #Debug
}

# Scope: country
# Assign id and enable monthly pulse for scoped country
# This is called in mod initialization phase and when a new country is formed
#
initialize_country = {

	if = {
		# can only be called once per country
		limit = { NOT = { has_country_flag = is_initialized } }

		set_country_id = yes
		every_owned_province = { set_province_owner_id = yes }

		fire_monthly_pulse = yes    # force an immediate update

		# Add monthly pulse trigger to nation's capital
		capital_scope = { add_province_triggered_modifier = monthly_pulse }

		# Initialize domestic policies
		init_domestic_policies = yes

		set_country_flag = is_initialized
		#log = "EVE: Initialized country [This.GetName] with id: [This.country_id.GetValue]"  #Debug
	}
}

# Scope: country
# Assign a unique id for scoped country
# This is called in mod initialization phase and when a new country is formed
#
set_country_id = {

	set_variable = { which = country_id value = 1 }

	if = {   # New country formed (post-init)

		limit = { has_global_flag = eve_initialized }
		PREV = { set_variable = { which = counter_var value = 1 } }  # Global (player) scope

		while = {
			limit = { NOT = { PREV = { is_variable_equal = { which = counter_var which = init_num } } } }
			PREV = { change_variable = { which = counter_var value = 1 } }
			change_variable = { which = country_id value = 1 }
		}

		PREV = { change_variable = { which = init_num value = 1 } }
		change_variable = { which = country_id value = 1 }
	}
	else = {	# Mod Initialization phase

		# Since we're unable to export either province or country id to a variable
		# and current scope is unable to retrieve variable values from ROOT (player)
		# we need to employ this convulated system of going through every country
		#
		every_country = {
			limit = { NOT = { has_global_flag = found_country } }
			if = { limit = { tag = PREV } set_global_flag = found_country }
			else = { PREV = { change_variable = { which = country_id value = 1 } } }
		}
		clr_global_flag = found_country
	}
}

# Scope: province
# Assign a unique id for province that coresponds to its owner country id
# Each province should ALWAYS have the same id as its current owner
#
set_province_owner_id = {

	# AFAIK this is currently the only way to export variables from different scopes,
	# because only variables in the same scope can be compared to each other

	owner = { set_variable = { which = counter_var value = 1 } }
	set_variable = { which = owner_id value = 1 }

	owner = {
		while = {
			limit = { NOT = { is_variable_equal = { which = counter_var which = country_id } } }
			change_variable = { which = counter_var value = 1 }
			PREV = { change_variable = { which = owner_id value = 1 } }
		}
		set_variable = { which = counter_var value = 1 }
	}
}

# Scope: country
# Called once after a country moves its capital to another province
#
changed_capital_province = {
	capital_scope = {
		add_province_triggered_modifier = monthly_pulse
	}
	set_country_flag = territorial_change
	fire_monthly_pulse = yes
}

# Scope: anywhere
#
# Calculate a unique type of modifier for 'arg1/arg2' value.
# This modifier increases progressively each step by increasing the value added 
# to the next step by 'arg4' respective to the current step defined with 'counter_var'.
# Increase in value added becomes a decrease after reaching steps midpoint.
# This is intended to be used with ruler and advisor skills to show how higher skill ratings
# become less impactful with each point. Midpoint skill ratings (ex. 3-6 adm) are worth the most.
#
# arg1 - value to calculate modifier for
# arg2 - maximum modifier steps
# arg3 - base modifier value
# arg4 - progressive increase value
#
calculate_progressive_mod = {

	# Here is an example of output result for each step with 
	# arg2 = 6, arg3 = 0.022 and arg4 = 0.005:
	#
	# prog inc:	 	 22    27     32 [mid] 27	   22     17
	# output_var:	 0.022 - 0.049 - 0.081 - 0.108 - 0.13 - 0.147
	
	set_variable = { which = counter_var value = 0 }
	set_variable = { which = output_var value = 0 }
	
	set_variable = { which = counter2_var which = arg2_var }
	divide_variable = { which = counter2_var value = 2 }
	subtract_variable = { which = counter2_var value = 1 }    # take lower half value
	
	while = {
		limit = { NOT = { is_variable_equal = { which = counter_var which = arg1_var } } }
		change_variable = { which = output_var which = arg3_var }
		if = {
			limit = { check_variable = { which = counter_var which = counter2_var} }
			subtract_variable = { which = arg3_var which = arg4_var }
		}
		else = { change_variable = { which = arg3_var which = arg4_var } }
		change_variable = { which = counter_var value = 1 }
	}
}

##################################
# EVE - Autonomy Scripts
##################################

# Scope: province
# Create a copy of 'owner_id' variable in province owner's country scope
#
export_owner_id_to_country_scope = {

	owner = { set_variable = { which = output_var value = 1 } }
	set_variable = { which = counter_var value = 1 }
	while = {
		limit = { NOT = { is_variable_equal = { which = counter_var which = owner_id } } }
		change_variable = { which = counter_var value = 1 }
		PREV = { change_variable = { which = output_var value = 1 } }
	}
}

# Scope: country
# Export THIS country id to PREV scope so it can be used for comparison
#
export_country_id_to_prev_scope = {

	PREV = { set_variable = { which = output_var value = 1 } }
	set_variable = { which = counter_var value = 1 }
	while = {
		limit = { NOT = { is_variable_equal = { which = counter_var which = country_id } } }
		change_variable = { which = counter_var value = 1 }
		PREV = { change_variable = { which = output_var value = 1 } }
	}
}

# Scope: country
# Called on each monthly pulse to check if country gained new territory
# Note: this will also update owner id for each new province
#
check_for_territorial_change = {

	# Check only for gained territory because lost territory doesn't
	# need an update from our side, the country that gained it will handle that

	every_owned_province = {
		export_owner_id_to_country_scope = yes
		owner = {
			if = { limit = { NOT = { is_variable_equal = {
				which = output_var which = country_id } } }

				PREV = {			# province scope
					if = {			# conquered another nation's capital province
						limit = {
							has_province_modifier = monthly_pulse
							NOT = { is_capital = yes }
						}
						set_province_flag = conquered_capital
					}
					else = { set_province_owner_id = yes }	# update owner id

					clr_province_flag = distant_province    # don't try to remove modifier
					set_country_flag = territorial_change   # call for autonomy recalc
					owner = { fire_monthly_pulse = yes }    # force an update
				}
			}
			set_variable = { which = output_var value = 1 }
		}
	}
}

# Scope: country
# Should ONLY be called from a provice with ROOT as that province
#
calc_country_dist_autonomy = {

	every_owned_province = {
		if = {
			limit = { has_province_flag = distant_province }
			remove_distance_modifier = yes
		}
		set_province_dist_autonomy = yes
	}
	clr_country_flag = territorial_change
}

# Scope: province
# Remove old distance modifier before applying a new one
# Called when recalculating province distance autonomy
#
remove_distance_modifier = {
	trigger_switch = {
		on_trigger = has_province_modifier
		prov_autonomy_from_dist_50 = { remove_province_modifier = prov_autonomy_from_dist_50 }
		prov_autonomy_from_dist_100 = { remove_province_modifier = prov_autonomy_from_dist_100 }
		prov_autonomy_from_dist_150 = { remove_province_modifier = prov_autonomy_from_dist_150 }
		prov_autonomy_from_dist_200 = { remove_province_modifier = prov_autonomy_from_dist_200 }
		prov_autonomy_from_dist_250 = { remove_province_modifier = prov_autonomy_from_dist_250 }
		prov_autonomy_from_dist_300 = { remove_province_modifier = prov_autonomy_from_dist_300 }
		prov_autonomy_from_dist_350 = { remove_province_modifier = prov_autonomy_from_dist_350 }
	}
}

# Scope: province
# Add autonomy modifiers based on province distance from capital
# Should ONLY be called from capital provinces (registered for monthly pulses)
#
set_province_dist_autonomy = {

	# will be removed if the province is not distant
	set_province_flag = distant_province

	if = {
		limit = { province_distance = { who = ROOT distance = 350 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_350" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 300 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_300" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 250 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_250" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 200 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_200" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 150 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_150" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 100 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_100" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 50 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_50" duration = -1 }
	}
	# province is in the capital zone and shouldn't have a distance modifier
	else = { clr_province_flag = distant_province }
}

##################################
# EVE - Domestic Policy Scripts
##################################

# Scope: country
# Initialize all domestic policies for country scope
#
init_domestic_policies = {

	add_country_modifier = { name = governance_policy duration = -1 }
	init_gov_policy = yes
}
