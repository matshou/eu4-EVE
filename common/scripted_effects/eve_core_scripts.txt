
##################################
# EVE - Core Scripts
##################################

# List of flags:
# ====================
#  eve_initialized			# global
#  found_country			# global
#  round_to_negative		# country
#  is_initialized			# country
#  territorial_change		# country
#  conquered_capital		# province
#  distant_province			# province

# Scope: country
# Round 'value_to_round' variable to 'round_to_decimal' places
# This is used to display clean values in game UI
#
round_value_to_decimal = {
	if = {
		limit = { NOT = { check_variable = { which = value_to_round value = 0 } } }
		multiply_variable = { which = value_to_round value = -1 }
		set_country_flag = round_to_negative
	}
	set_variable = { which = counter_var value = 1 }
	set_variable = { which = counter_var2 value = 1 }    # if 'value_to_round' >= 1
	while = {
		limit = { check_variable = { which = value_to_round which = counter_var2 } }
		multiply_variable = { which = counter_var value = 10 }
		multiply_variable = { which = counter_var2 value = 10 }
	}
	while = {
		limit = { check_variable = { which = round_to_decimal value = 1 } }
		multiply_variable = { which = value_to_round value = 10 }
		multiply_variable = { which = counter_var value = 10 }
		subtract_variable = { which = round_to_decimal value = 1 }
	}

	set_variable = { which = normalize_var which = counter_var }
	divide_variable = { which = normalize_var which = counter_var2 }   # used to normalize value

	while = {
		limit = { NOT = { is_variable_equal = { which = counter_var value = -1 } } }
		if = {
			limit = { check_variable = { which = value_to_round which = counter_var } }
			change_variable = { which = counter_var value = 0.5 }
			if = {
				limit = { check_variable = { which = value_to_round which = counter_var } }
				change_variable = { which = counter_var value = 0.5 }
			}
			else = { change_variable = { which = counter_var value = -0.5 } }
			set_variable = { which = value_to_round which = counter_var }
			set_variable = { which = counter_var value = -1 }               # break loop
		}
		else = { subtract_variable = { which = counter_var value = 1 } }
	}
	divide_variable = { which = value_to_round which = normalize_var }   # normalize value
	if = {
		limit = { has_country_flag = round_to_negative }
		multiply_variable = { which = value_to_round value = -1 }
		clr_country_flag = round_to_negative
	}
}

# Scope: country
reset_monthly_pulse = {
	set_variable = { which = month_pulse_eta value = 30 }
}

# Scope: country
# The monthly pulse will fire the NEXT day in capital province
#
fire_monthly_pulse = {
	set_variable = { which = month_pulse_eta value = 0 }
	#log = "EVE: [This.GetName] ordered an immediate monthly pulse"  #Debug
}

# Scope: country
# Assign id and enable monthly pulse for scoped country
# This is called in mod initialization phase and when a new country is formed
#
initialize_country = {

	if = {
		# can only be called once per country
		limit = { NOT = { has_country_flag = is_initialized } }

		set_country_id = yes
		every_owned_province = { set_province_owner_id = yes }

		reset_monthly_pulse = yes   # initialize monthly pulse
		fire_monthly_pulse = yes    # force an immediate update

		# Add monthly pulse trigger to nation's capital
		capital_scope = { add_province_triggered_modifier = monthly_pulse }

		# Initialize domestic policies
		init_domestic_policies = yes

		set_country_flag = is_initialized
		#log = "EVE: Initialized country [This.GetName] with id: [This.country_id.GetValue]"  #Debug
	}
}

# Scope: country
# Assign a unique id for scoped country
# This is called in mod initialization phase and when a new country is formed
#
set_country_id = {

	set_variable = { which = country_id value = 1 }

	if = {   # New country formed (post-init)

		limit = { has_global_flag = eve_initialized }
		PREV = { set_variable = { which = counter_var value = 1 } }  # Global (player) scope

		while = {
			limit = { NOT = { PREV = { is_variable_equal = { which = counter_var which = init_num } } } }
			PREV = { change_variable = { which = counter_var value = 1 } }
			change_variable = { which = country_id value = 1 }
		}

		PREV = { change_variable = { which = init_num value = 1 } }
		change_variable = { which = country_id value = 1 }
	}
	else = {	# Mod Initialization phase

		# Since we're unable to export either province or country id to a variable
		# and current scope is unable to retrieve variable values from ROOT (player)
		# we need to employ this convulated system of going through every country
		#
		every_country = {
			limit = { NOT = { has_global_flag = found_country } }
			if = { limit = { tag = PREV } set_global_flag = found_country }
			else = { PREV = { change_variable = { which = country_id value = 1 } } }
		}
		clr_global_flag = found_country
	}
}

# Scope: province
# Assign a unique id for province that coresponds to its owner country id
# Each province should ALWAYS have the same id as its current owner
#
set_province_owner_id = {

	# AFAIK this is currently the only way to export variables from different scopes,
	# because only variables in the same scope can be compared to each other

	owner = { set_variable = { which = counter_var value = 1 } }
	set_variable = { which = owner_id value = 1 }

	owner = {
		while = {
			limit = { NOT = { is_variable_equal = { which = counter_var which = country_id } } }
			change_variable = { which = counter_var value = 1 }
			PREV = { change_variable = { which = owner_id value = 1 } }
		}
		set_variable = { which = counter_var value = 1 }
	}
}

# Scope: country
# Called once after a country moves its capital to another province
#
changed_capital_province = {
	capital_scope = {
		add_province_triggered_modifier = monthly_pulse
	}
	set_country_flag = territorial_change
	fire_monthly_pulse = yes
}

##################################
# EVE - Autonomy Scripts
##################################

# Scope: province
# Create a copy of 'owner_id' variable in province owner's country scope
#
export_owner_id_to_country_scope = {

	owner = { set_variable = { which = province_owner_id value = 1 } }
	set_variable = { which = counter_var value = 1 }
	while = {
		limit = { NOT = { is_variable_equal = { which = counter_var which = owner_id } } }
		change_variable = { which = counter_var value = 1 }
		PREV = { change_variable = { which = province_owner_id value = 1 } }
	}
}

# Scope: country
# Export THIS country id to PREV scope so it can be used for comparison
#
export_country_id_to_prev_scope = {

	PREV = { set_variable = { which = known_country_id value = 1 } }
	set_variable = { which = counter_var value = 1 }
	while = {
		limit = { NOT = { is_variable_equal = { which = counter_var which = country_id } } }
		change_variable = { which = counter_var value = 1 }
		PREV = { change_variable = { which = known_country_id value = 1 } }
	}
}

# Scope: country
# Called on each monthly pulse to check if country gained new territory
# Note: this will also update owner id for each new province
#
check_for_territorial_change = {

	# Check only for gained territory because lost territory doesn't
	# need an update from our side, the country that gained it will handle that

	every_owned_province = {
		export_owner_id_to_country_scope = yes
		owner = {
			if = { limit = { NOT = { is_variable_equal = {
				which = province_owner_id which = country_id } } }

				PREV = {			# province scope
					if = {			# conquered another nation's capital province
						limit = {
							has_province_modifier = monthly_pulse
							NOT = { is_capital = yes }
						}
						set_province_flag = conquered_capital
					}
					else = { set_province_owner_id = yes }	# update owner id

					clr_province_flag = distant_province    # don't try to remove modifier
					set_country_flag = territorial_change   # call for autonomy recalc
					owner = { fire_monthly_pulse = yes }    # force an update
				}
			}
			set_variable = { which = province_owner_id value = 1 }
		}
	}
}

# Scope: country
# Should ONLY be called from a provice with ROOT as that province
#
calc_country_dist_autonomy = {

	every_owned_province = {
		if = {
			limit = { has_province_flag = distant_province }
			remove_distance_modifier = yes
		}
		set_province_dist_autonomy = yes
	}
	clr_country_flag = territorial_change
}

# Scope: province
# Remove old distance modifier before applying a new one
# Called when recalculating province distance autonomy
#
remove_distance_modifier = {
	trigger_switch = {
		on_trigger = has_province_modifier
		prov_autonomy_from_dist_50 = { remove_province_modifier = prov_autonomy_from_dist_50 }
		prov_autonomy_from_dist_100 = { remove_province_modifier = prov_autonomy_from_dist_100 }
		prov_autonomy_from_dist_150 = { remove_province_modifier = prov_autonomy_from_dist_150 }
		prov_autonomy_from_dist_200 = { remove_province_modifier = prov_autonomy_from_dist_200 }
		prov_autonomy_from_dist_250 = { remove_province_modifier = prov_autonomy_from_dist_250 }
		prov_autonomy_from_dist_300 = { remove_province_modifier = prov_autonomy_from_dist_300 }
		prov_autonomy_from_dist_350 = { remove_province_modifier = prov_autonomy_from_dist_350 }
	}
}

# Scope: province
# Add autonomy modifiers based on province distance from capital
# Should ONLY be called from capital provinces (registered for monthly pulses)
#
set_province_dist_autonomy = {

	# will be removed if the province is not distant
	set_province_flag = distant_province

	if = {
		limit = { province_distance = { who = ROOT distance = 350 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_350" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 300 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_300" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 250 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_250" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 200 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_200" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 150 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_150" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 100 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_100" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 50 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_50" duration = -1 }
	}
	# province is in the capital zone and shouldn't have a distance modifier
	else = { clr_province_flag = distant_province }
}

##################################
# EVE - Domestic Policy Scripts
##################################

# Scope: country
# Initialize all domestic policies for country scope
#
init_domestic_policies = {

	add_country_modifier = { name = governance_policy duration = -1 }
	init_gov_policy = yes
}
