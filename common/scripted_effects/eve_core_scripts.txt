
##################################
# EVE - Core Scripts
##################################

# When called monthly pulse will fire next day in capital province
# @scope country
#
core.fire_monthly_pulse = {
	set_country_flag = immediate_update
}

# Called once every day for each country
# @scope country
#
core.on_daily_pulse = {

	# This triggers when the capital gets moved to another
	# province or the previous owner gets annexed
	if = {
		limit = { ROOT = { province.is_not_capital = yes } }
		ROOT = { capital.lose_status = yes }
	}
	else = {	# Don't do anything else if no longer capital
		if = {
			limit = { nation.has_new_ruler = yes }

			set_ruler_flag = inagurated
			governance.calc_ruler_m = yes
		}
		if = {
			limit = { has_country_flag = immediate_update }
			core.on_monthly_pulse = yes
			clr_country_flag = immediate_update
		}
		else_if = {
			limit = { core.has_month_passed = yes }
			variable.export = { which = last_month from = is_month }
			core.on_monthly_pulse = yes
		}
	}
}

# This fires once each month, use it to handle monthly updates
# @scope country
#
core.on_monthly_pulse = {

	if = {
		limit = { core.is_global_scope = yes }
		core.global_update = yes
	}

	states.update_all = yes
	states.update_non_states = yes
	autonomy.check_for_change = yes
	vassals.update = yes

	core.update_advisor_mods = yes

	# Gained new territory or changed capital
	if = {
		limit = { nation.has_territory_changes = yes }
		autonomy.update_distance = yes
	}
}

# Called from global scope each month
# @scope global
#
core.global_update = {

	# Check to see if a new country formed
	every_country = {
		limit = { nation.is_initialized = no }
		core.init_country = yes
	}
}

# Assign country and province id's and enable monthly pulse for scoped country.
# Called in mod init phase and when a new country is formed
# @scope country
#
core.init_country = {

	if = {
		limit = { nation.is_neutral_faction = no }
		if = {
			limit = { core.is_country = yes }

			core.set_country_id = yes
			every_owned_province = {
				province.set_owner_id = yes
			}
			capital.init = yes						# apply capital modifiers
			core.fire_monthly_pulse = yes    		# force an immediate update

			set_country_flag = is_initialized
			set_country_flag = territorial_change
		}
		else = {
			logger.print_error = { code = 140 method = 2 }
		}
	}
}

# Assign a unique id for scoped country
# @scope this:country prev:global
#
core.set_country_id = {

	if = {			# only call from global scope
		limit = {
			PREV = { core.is_global_scope = yes }
		}
		PREV = { core.export_var_to_prev = { var = init_num } }
		declare_variable = { which = country_id from = output }

		PREV = { change_variable = { which = init_num value = 1 } }
		change_variable = { which = country_id value = 1 }
	}
	else = { logger.print_error = { code = 199 } }
}

# Export argument variable to PREV scope so it can be used for comparison.
# Currently performing an interlaced scan with intervals using while loops
# is the only way to transfer variable values between scopes.
#
# @scope anywhere
# @param var (variable to export)
# @return output
#
core.export_var_to_prev = {

	set_variable = { which = count value = 1000 }
	PREV = { set_variable = { which = output value = 1000 } }

	while = {
		limit = {
			is_var_greater_than = { var1 = $var$ var2 = count }
		}
		change_variable = { which = count value = 1000 }
		PREV = { change_variable = { which = output value = 1000 } }
	}
	while = {
		limit = {
			is_var_less_than = { var1 = $var$ var2 = count }
		}
		subtract_variable = { which = count value = 100 }
		PREV = { subtract_variable = { which = output value = 100 } }
	}
	while = {
		limit = {
			is_var_greater_than = { var1 = $var$ var2 = count }
		}
		change_variable = { which = count value = 10 }
		PREV = { change_variable = { which = output value = 10 } }
	}

	while = {
		limit = { is_var_not_equal_to = { var1 = count var2 = $var$ } }
		subtract_variable = { which = count value = 1 }
		PREV = { subtract_variable = { which = output value = 1 } }
	}
}

# Update modifiers triggered by hiring advisors
# We manually trigger them because we want them to be hidden
# @scope country
# @access public
#
core.update_advisor_mods = {

	update_advisor_mod = { advisor = inquisitor }
	update_advisor_mod = { advisor = statesman }
	update_advisor_mod = { advisor = naval_reformer }
	update_advisor_mod = { advisor = philosopher }
	update_advisor_mod = { advisor = artist }
}

# @access private
update_advisor_mod = {

	if = {
		limit = { advisor = $advisor$ }
		if = {
			limit = { NOT = { has_country_modifier = employed_$advisor$ } }
			add_country_modifier = { name = employed_$advisor$ hidden = yes }
		}
	}
	else if = {
		limit = { has_country_modifier = employed_$advisor$ }
		remove_country_modifier = employed_$advisor$
	}
}

# Adds monarch power value to scope (can be negative value).
# Arguments can be passed as negative values by prepending minus.
# Multiple arguments can be passed in one call
# @scope country
# @access public
#
core.add_monarch_power = {

	[[adm] add_monarch_power = { power = adm value = $adm$ } ]
	[[dip] add_monarch_power = { power = dip value = $dip$ } ]
	[[mil] add_monarch_power = { power = mil value = $mil$ } ]
}

# @access private
add_monarch_power = {

	if = {
		limit = { is_var_negative_value = { var = $value$ } }
		while = {
			limit = { is_var_not_null = { var = $value$ } }
			add_$power$_power = -1
			change_variable = { which = $value$ value = 1 }
		}
	}
	else = {
		while = {
			limit = { is_var_not_null = { var = $value$ } }
			add_$power$_power = 1
			subtract_variable = { which = $value$ value = 1 }
		}
	}
}
