
##################################
# EVE - Core Scripts
##################################

# List of flags:
# ====================
#  eve_initialized				# global
#  found_country				# global
#  inagurated					# ruler
#  immediate_update				# country
#  is_initialized				# country
#  territorial_change			# country
#  gained_new_territory			# country
#  new_territory				# province
#  conquered_capital			# province
#  distant_province				# province


# List of variables:
# ====================
#  error_code               	# global
#  error_point					# global
#  last_month					# country
#  country_id					# country
#  owner_id						# province


# When called monthly pulse will fire next day in capital province
# @scope country
#
core.fire_monthly_pulse = {
	set_country_flag = immediate_update
}

# Called once every day for each country
# @scope country
#
core.on_daily_pulse = {

	# This triggers when the capital gets moved to another
	# province or the previous owner gets annexed
	if = {
		limit = { ROOT = { province.is_not_capital = yes } }
		ROOT = { capital.lose_status = yes }
	}
	else = {	# Don't do anything else if no longer capital
		if = {
			limit = { nation.has_new_ruler = yes }

			set_ruler_flag = inagurated
			governance.calc_ruler_mod = yes
		}
		if = {
			limit = { core.can_update = yes }
			core.on_monthly_pulse = yes
		}
	}
}

# This fires once each month, use it to handle monthly updates
# @scope country
#
core.on_monthly_pulse = {

	export_to_variable = { which = last_month value = trigger_value:is_month }
	clr_country_flag = immediate_update

	if = {
		limit = { core.is_global_scope = yes }
		core.global_update = yes
	}

	states.update_all = yes
	states.update_non_states = yes
	core.update_policies = yes
	autonomy.check_for_change = yes
	vassals.update = yes

	# Gained new territory or changed capital
	if = {
		limit = { nation.has_territory_changes = yes }
		autonomy.update_distance = yes
	}
}

# Called from global scope each month
# @scope global
#
core.global_update = {

	# Check to see if a new country formed
	every_country = {
		limit = { nation.is_initialized = no }
		core.init_country = yes
	}
}

# Assign country and province id's and enable monthly pulse for scoped country.
# Called in mod init phase and when a new country is formed
# @scope country
#
core.init_country = {

	if = {
		limit = { nation.is_neutral_faction = no }
		if = {
			limit = { core.is_country = yes }

			core.set_country_id = yes
			every_owned_province = {
				core.set_prov_owner_id = yes
			}
			capital.init = yes						# apply capital modifiers
			core.fire_monthly_pulse = yes    		# force an immediate update

			set_country_flag = is_initialized
			set_country_flag = territorial_change
		}
		else = {
			logger.print_error = { code = 140 method = 2 }
		}
	}
}

# Assign a unique id for scoped country
# @scope this:country prev:global
#
core.set_country_id = {

	if = {			# only call from global scope
		limit = {
			PREV = { core.is_global_scope = yes }
		}
		PREV = { core.export_var_to_prev = { var = init_num } }
		set_variable = { which = country_id which = output_var }

		PREV = { change_variable = { which = init_num value = 1 } }
		change_variable = { which = country_id value = 1 }
	}
	else = { logger.print_error = { code = 199 method = 0 } }
}

# Assign a unique id for province that corresponds to owner country id
# Each owned province should ALWAYS have the same id as its current owner
# @scope country
#
core.set_prov_owner_id = {

	if = {
		limit = { core.is_province = no }
		logger.print_error = { code = 140 method = 1 }
	}
	owner = {
		if = {
			limit = { check_variable = { which = country_id value = 1 } }
			core.export_var_to_prev = { var = country_id }
			PREV = { set_variable = { which = owner_id which = output_var } }
		}
		else = { logger.print_error = { code = 279 method = 1 } }
	}
}

# Export argument variable to PREV scope so it can be used for comparison.
# Currently performing an interlaced scan with intervals using while loops
# is the only way to transfer variable values between scopes.
#
# @scope anywhere
# @param var (variable to export)
# @return output
#
core.export_var_to_prev = {

	set_variable = { which = count value = 1000 }
	PREV = { set_variable = { which = output value = 1000 } }

	while = {
		limit = {
			is_var_greater_than = { var1 = $var$ var2 = count }
		}
		change_variable = { which = count value = 1000 }
		PREV = { change_variable = { which = output value = 1000 } }
	}
	while = {
		limit = {
			is_var_less_than = { var1 = $var$ var2 = count }
		}
		subtract_variable = { which = count value = 100 }
		PREV = { subtract_variable = { which = output value = 100 } }
	}
	while = {
		limit = {
			is_var_greater_than = { var1 = $var$ var2 = count }
		}
		change_variable = { which = count value = 10 }
		PREV = { change_variable = { which = output value = 10 } }
	}

	while = {
		limit = { is_var_not_equal_to = { var1 = count var2 = $var$ } }
		subtract_variable = { which = count value = 1 }
		PREV = { subtract_variable = { which = output value = 1 } }
	}
}

# Update all domestic policies
# @scope country
core.update_policies = {

	if = {
		limit = { adm_tech = 3 }	# Medieval Admin
		if = {
			limit = { governance.is_initialized = no }
			governance.init_policy = yes
		}
		else = {
			governance.update_policy = yes
		}
	}
}
