
##############################
# EVE - State Scripts
##############################

# Update all states and provinces belonging to states
# @scope country
#
states.update_states = {

	every_owned_province = {
		limit = { is_state = yes }
		# This scope will be entered ONCE for each state
		if = {
			limit = { NOT = { has_province_flag = state_prov_updated } }
			update_state = yes
			owner = {
				if = {
					limit = { has_country_flag = adm_center_in_state }
					if = {
						limit = { NOT = { has_country_flag = adm_center_found } }
						PREV = { states.remove_jurisdiction = yes }
					}
					else = { clr_country_flag = adm_center_found }
					clr_country_flag = adm_center_in_state
				}
			}
		}
		clr_province_flag = state_prov_updated
	}
}

# Update every province in the currently scoped state.
# This scope will be entered once for every province in current state
# @access private
# @scope province
#
update_state = {

	every_province_in_state = {

		# Place your PROVINCE update code here:

		if = {
			limit = { has_province_modifier = prov_state_jurisdiction }
			owner = { set_country_flag = adm_center_in_state }
		}
		else_if = {
			limit = { has_province_modifier = prov_state_adm_center }
			}

			# Check to make sure every province in state is under jurisdiction
			every_province_in_state = {
				limit = {
					NOT = { province_id = PREV }
					NOT = { has_province_modifier = prov_state_jurisdiction }
				}
				add_province_modifier = { name = prov_state_jurisdiction duration = -1 }
			}
			owner = { set_country_flag = adm_center_found }
		}
		# Province recently became a state and has administrative building
		else_if = {
			limit = {
				has_admin_building = yes
				can_build_adm_center = yes
			}
			states.apply_jurisdiction = yes
			owner = { set_country_flag = adm_center_found }
		}

		# check every province only once per state update
		set_province_flag = state_prov_updated
	}
}

# Update every province that does not belong to a state
# @scope country
# @access public
#
states.update_territories = {

	every_owned_province = {
		limit = { NOT = { is_state = yes } }
		if = {
			limit = { has_province_modifier = prov_state_adm_center }
			remove_province_modifier = prov_state_adm_center
		}
		else_if = {
			limit = { has_province_modifier = prov_state_jurisdiction }
			remove_province_modifier = prov_state_jurisdiction
		}
	}
}

# Calculate development of each province in current state scope
# @scope province
# @return owner:output
#
states.get_development = {

	owner = { set_variable = { which = output value = 0 } }
	every_province_in_state = {
		owner = {
			export_to_variable = { which = i value = development who = PREV }
			change_variable = { which = output which = i }
			set_variable = { which = i value = 0 }
		}
	}
}

# Calculate the ratio of $DEV$ in relation to total country development.
# @scope country
# @return output
#
states.get_dev_ratio = {

	export_to_variable = { which = i value = total_development }
	divide_variable = { which = $DEV$ which = i }
	set_variable = { which = output which = $DEV$ }
	set_variable = { which = i value = 0 }
}

# Apply jurisdiction province modifiers to current state.
# Needs to be called from a province with an administrative building
# @scope province
#
states.apply_jurisdiction = {

	add_province_modifier = { name = prov_state_adm_center duration = -1 }

	every_province_in_state = {
		limit = { NOT = { has_province_modifier = prov_state_adm_center } }
		add_province_modifier = { name = prov_state_jurisdiction duration = -1 }
	}
}

# Remove jurisdiction province modifiers to current state
# @scope province
#
states.remove_jurisdiction = {

	if = {
		limit = { has_province_modifier = prov_state_adm_center }
		remove_province_modifier = prov_state_adm_center
	}
	# Note that this will not remove modifiers if the provinces are not in state
	# we will have to manually scan for these and remove them later on
	#
	every_province_in_state = {
		limit = { has_province_modifier = prov_state_jurisdiction }
		remove_province_modifier = prov_state_jurisdiction
	}
}
