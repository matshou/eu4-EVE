
##################################
# EVE - Autonomy Scripts
##################################

# Called each month to check if country gained new territory.
# This will also update owner id for each new province
# @scope country
#
autonomy.check_for_change = {

	# Check only for gained territory because lost territory doesn't
	# need an update from our side, the country that gained it will handle that

	every_owned_province = {

		# Gained territory is uncolonized land
		# For some reason each time a province becomes uncolonized it
		# loses all custom data, so we need to set 'owner_id' again
		if = {
			limit = { is_var_less_than_val = { VAR = owner_id VAL = 1 } }
			autonomy.call_for_province_update = yes
			core.set_prov_owner_id = yes
		}
		else = {
			# do this after handling uncolonized territory
			core.export_var_to_prev = { VAR = owner_id }

			if = {			# newly gained province
				limit = {
					owner = { is_var_not_equal_to = { VAR1 = output_var VAR2 = country_id } }
				}

				# Conquered another nation's capital province
				# Raising the flag to let the province ROOT scope know we've already updated autonomy.
				# Also don't update owner id, it will be used by province ROOT scope to find last province owner
				if = {
					limit = { has_province_modifier = capital_province }
					set_province_flag = conquered_capital
				}
				else = { core.set_prov_owner_id = yes }		# update owner id

				clr_province_flag = distant_province		# don't try to remove modifier
				autonomy.call_for_province_update = yes		# call for an autonomy update
			}
		}
	}
}

# Call for autonomy update for scope province
# @scope province
#
autonomy.call_for_province_update = {

	set_province_flag = new_territory		# update only this province

	owner = {
		set_country_flag = territorial_change   	# call for autonomy update
		set_country_flag = gained_new_territory		# update only new territory
	}
}

# Set local autonomy floor for every owned distance based on distance from capital.
# Should ONLY be called from scope with ROOT a capital province
# @scope country
#
autonomy.update_distance = {

	if = {
		limit = { has_country_flag = gained_new_territory }
		every_owned_province = {
			limit = { has_province_flag = new_territory }
			autonomy.set_distance = yes
			clr_province_flag = new_territory
		}
		clr_country_flag = gained_new_territory
	}
	else = {
		every_owned_province = {
			autonomy.remove_distance_mod = yes
			autonomy.set_distance = yes
		}
	}
	clr_country_flag = territorial_change
}

# Remove old distance modifier before applying new one
# Called when recalculating distance autonomy
# @scope province
#
autonomy.remove_distance_mod = {

	if = {
		limit = { has_province_flag = distant_province }
		trigger_switch = {
			on_trigger = has_province_modifier
			prov_autonomy_from_dist_50 = { remove_province_modifier = prov_autonomy_from_dist_50 }
			prov_autonomy_from_dist_100 = { remove_province_modifier = prov_autonomy_from_dist_100 }
			prov_autonomy_from_dist_150 = { remove_province_modifier = prov_autonomy_from_dist_150 }
			prov_autonomy_from_dist_200 = { remove_province_modifier = prov_autonomy_from_dist_200 }
			prov_autonomy_from_dist_250 = { remove_province_modifier = prov_autonomy_from_dist_250 }
			prov_autonomy_from_dist_300 = { remove_province_modifier = prov_autonomy_from_dist_300 }
			prov_autonomy_from_dist_350 = { remove_province_modifier = prov_autonomy_from_dist_350 }
		}
	}
}

# Add autonomy modifiers based on province distance from capital
# Should ONLY be called from scope with ROOT a capital province
# @scope province
#
autonomy.set_distance = {

	# will be removed if the province is not distant
	set_province_flag = distant_province

	if = {
		limit = { province_distance = { who = ROOT distance = 350 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_350" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 300 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_300" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 250 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_250" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 200 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_200" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 150 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_150" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 100 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_100" duration = -1 }
	}
	else_if = {
		limit = { province_distance = { who = ROOT distance = 50 } }
		add_province_modifier = { name = "prov_autonomy_from_dist_50" duration = -1 }
	}
	# province is in the capital zone and shouldn't have a distance modifier
	else = { clr_province_flag = distant_province }
}
