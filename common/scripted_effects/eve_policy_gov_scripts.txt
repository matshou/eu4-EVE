
###############################
# EVE - Governance Policy
###############################

# List of flags:
# ====================
#  policy_gov_neutral		# all
#  policy_centralized		# country
#  policy_decentralized		# scope

# List of variables:
# ====================
#  policy_gov_min
#  policy_gov_max
#  policy_gov_val			# current rating for this policy
#  policy_gov_rating		# short numerical for 'policy_gov_val'
#  policy_gov_mod
#  policy_gov_gui_val		# used by GUI only
#  policy_gov_rul_mod		# from ruler administrative skill
#  policy_gov_adv_mod		# from advisor administrative skill

# Scope: country
# Called from initialization phase for every country
#
init_gov_policy = {

	set_variable = { which = policy_gov_min value = -50 }
	set_variable = { which = policy_gov_max value = 50 }
	set_variable = { which = policy_gov_val value = 0 }        # These are base values,
	set_variable = { which = policy_gov_rating value = 0 }     # DO NOT CHANGE!
	set_variable = { which = policy_gov_mod value = 0 }

	set_country_flag = policy_gov_neutral

	# TODO: Implement max values for more governments, and set initial value
	#       different for all governments (could be random value below maximum)

	trigger_switch = {
		on_trigger = government

	# Monarchies
		despotic_monarchy = { set_variable = { which = policy_gov_max value = 20 } }
		feudal_monarchy = { set_variable = { which = policy_gov_max value = 0 } }
		administrative_monarchy = { set_variable = { which = policy_gov_max value = 30 } }

	# Republics
		noble_republic = { set_variable = { which = policy_gov_max value = 10 } }
		merchant_republic = { set_variable = { which = policy_gov_max value = 0 } }
		administrative_republic = { set_variable = { which = policy_gov_max value = 30 } }

	# Tribal
		tribal = { set_variable = { which = policy_gov_max value = -20 } }
	}

	# Clamp policy value according to max value
	if = {
		limit = { check_variable = { which = policy_gov_val which = policy_gov_max } }
		set_variable = { which = policy_gov_val which = policy_gov_max }
		set_variable = { which = policy_gov_rating which = policy_gov_val }
	}

	# Initialize GUI value so we don't get errors
	set_variable = { which = policy_gov_gui_val which = policy_gov_val }

	# Set policy as active and add to GUI
	add_active_policy = domestic_policy_governance
}

# Scope: country
# Update policy modifiers, rating and GUI values
#
update_gov_policy = {

	# Reset the modifier so we can recalculate it
	set_variable = { which = policy_gov_mod value = 0 }

	# Calculate modifier to add to rating
	calc_gov_policy_mod = yes

	if = {
		limit = { 	# Update only if modifier would affect policy
			NOT = { is_variable_equal = { which = policy_gov_mod value = 0 } }
		}
		if = {
			limit = { check_variable = { which = policy_gov_mod value = 0 } }	# centralizing
			if = {
				limit = { NOT = { is_variable_equal = { which = policy_gov_val which = policy_gov_max } } }
				change_variable = { which = policy_gov_val which = policy_gov_mod }

				if = { # Do not allow value to go above maximum
					limit = { check_variable = { which = policy_gov_val which = policy_gov_max } }
					set_variable = { which = policy_gov_val which = policy_gov_max }
				}
				update_gov_policy_rating = yes
			}
		}
		else = {	# decentralizing
			if = {
				limit = { NOT = { is_variable_equal = { which = policy_gov_val which = policy_gov_min } } }
				change_variable = { which = policy_gov_val which = policy_gov_mod }

				if = { # Do not allow value to go below minimum
					limit = { NOT = { check_variable = { which = policy_gov_val which = policy_gov_min } } }
					set_variable = { which = policy_gov_val which = policy_gov_max }
				}
				update_gov_policy_rating = yes
			}
		}
	}

	set_variable = { which = policy_gov_gui_val which = policy_gov_val }  # used only in GUI
	round_gov_policy_gui_values = yes	 								  # round values for display
}

# Scope: country
# Reset and calculate all policy modifiers.
# Should be called on each monthly pulse update
#
calc_gov_policy_mod = {

	# Variables with "_mod" suffix below are used in localisation
	# to give information about modifiers affecting policy change each month

	export_to_variable = { which = stability_mod value = stability }
	multiply_variable = { which = stability_mod value = 0.025 }
	change_variable = { which = policy_gov_mod which = stability_mod }

	export_to_variable = { which = corruption_mod value = corruption }
	multiply_variable = { which = corruption_mod value = -0.003 }
	change_variable = { which = policy_gov_mod which = corruption_mod }

	export_to_variable = { which = autonomy_mod value = average_autonomy }
	multiply_variable = { which = autonomy_mod value = -0.008 }
	change_variable = { which = policy_gov_mod which = autonomy_mod }

	if = {
		limit = { is_part_of_hre = yes }
		change_variable = { which = policy_gov_mod value = -0.05 }
	}

	# Ruler's Administrative Skill
	if = {
		# recalculate only once for each new ruler
		limit = { NOT = { had_ruler_flag = { flag = inagurated days = 1 } } }

		set_variable = { which = arg1_var which = ruler_adm_skill }
		set_variable = { which = arg2_var value = 6 }
		set_variable = { which = arg3_var value = 0.022 }
		set_variable = { which = arg4_var value = 0.005 }

		calculate_progressive_mod = yes
		set_variable = { which = policy_gov_rul_mod which = output_var }
		change_variable = { which = policy_gov_mod which = policy_gov_rul_mod }
	}

	# Advisor's Administrative Skill
	if = {
		limit = { advisor = master_of_mint }
		get_mint_advisor_lvl = yes
		set_variable = { which = arg1_var which = output_var }

		set_variable = { which = arg2_var value = 5 }
		set_variable = { which = arg3_var value = 0.015 }
		set_variable = { which = arg4_var value = 0.004 }

		calculate_progressive_mod = yes
		set_variable = { which = policy_gov_adv_mod which = output_var }
		change_variable = { which = policy_gov_mod which = policy_gov_adv_mod }
	}
}

# Scope: country
# Update rating value and country modifiers
#
update_gov_policy_rating = {
	if = {
		limit = { has_country_flag = policy_gov_neutral }   # Rating: 0
		if = {
			limit = { check_variable = { which = policy_gov_val value = 5 } }
			set_variable = { which = policy_gov_rating value = 1 }
			set_country_flag = policy_centralized                   # just became centralized
			clr_country_flag = policy_gov_neutral
		}
		else_if = {
			limit = { NOT = { check_variable = { which = policy_gov_val value = -4.999 } } }
			set_variable = { which = policy_gov_rating value = -1 }
			set_country_flag = policy_decentralized                 # just became decentralized
			clr_country_flag = policy_gov_neutral
		}
	}
	else_if = {
		limit = { has_country_flag = policy_centralized }
		if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = 1 } }	   # Rating: 1
			if = {
				limit = { check_variable = { which = policy_gov_val value = 15 } }
				set_variable = { which = policy_gov_rating value = 2 }
			}
			else_if = {
				limit = { NOT = { check_variable = { which = policy_gov_val value = 5 } } }
				set_variable = { which = policy_gov_rating value = 0 }
				clr_country_flag = policy_centralized					# no longer centralized
				set_country_flag = policy_gov_neutral
			}
		}
		else_if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = 2 } }	   # Rating: 2
			if = {
				limit = { check_variable = { which = policy_gov_val value = 25 } }
				set_variable = { which = policy_gov_rating value = 3 }
			}
			else_if = {
				limit = { NOT = { check_variable = { which = policy_gov_val value = 15 } } }
				set_variable = { which = policy_gov_rating value = 1 }
			}
		}
		else_if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = 3 } }	   # Rating: 3
			if = {
				limit = { check_variable = { which = policy_gov_val value = 35 } }
				set_variable = { which = policy_gov_rating value = 4 }
			}
			else_if = {
				limit = { NOT = { check_variable = { which = policy_gov_val value = 25 } } }
				set_variable = { which = policy_gov_rating value = 2 }
			}
		}
		else_if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = 4 } }	   # Rating: 4
			if = {
				limit = { check_variable = { which = policy_gov_val value = 45 } }
				set_variable = { which = policy_gov_rating value = 5 }
			}
			else_if = {
				limit = { NOT = { check_variable = { which = policy_gov_val value = 35 } } }
				set_variable = { which = policy_gov_rating value = 3 }
			}
		}
	}
	else_if = {
		limit = { has_country_flag = policy_decentralized }
		if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = -1 } }	# Rating: -1
			if = {
				limit = { NOT = { check_variable = { which = policy_gov_val value = -14.999 } } }
				set_variable = { which = policy_gov_rating value = -2 }
			}
			else_if = {
				limit = { check_variable = { which = policy_gov_val value = -4.999 } }
				set_variable = { which = policy_gov_rating value = 0 }
				clr_country_flag = policy_decentralized					# no longer decentralized
				set_country_flag = policy_gov_neutral
			}
		}
		else_if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = -2 } }    # Rating: -2
			if = {
				limit = { NOT = { check_variable = { which = policy_gov_val value = -24.999 } } }
				set_variable = { which = policy_gov_rating value = -3 }
			}
			else_if = {
				limit = { check_variable = { which = policy_gov_val value = -14.999 } }
				set_variable = { which = policy_gov_rating value = -1 }
			}
		}
		else_if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = -3 } }    # Rating: -3
			if = {
				limit = { NOT = { check_variable = { which = policy_gov_val value = -34.999 } } }
				set_variable = { which = policy_gov_rating value = -4 }
			}
			else_if = {
				limit = { check_variable = { which = policy_gov_val value = -24.999 } }
				set_variable = { which = policy_gov_rating value = -2 }
			}
		}
		else_if = {
			limit = { is_variable_equal = { which = policy_gov_rating value = -4 } }    # Rating: -4
			if = {
				limit = { NOT = { check_variable = { which = policy_gov_val value = -44.999 } } }
				set_variable = { which = policy_gov_rating value = -5 }
			}
			else_if = {
				limit = { check_variable = { which = policy_gov_val value = -34.999 } }
				set_variable = { which = policy_gov_rating value = -3 }
			}
		}
	}
}

# Scope: country
# Used to display clean values in game UI
# Note: do only for player to reduce CPU usage
#
round_gov_policy_gui_values = {
	if = {
		limit = { ai = no }

		set_variable = { which = arg1_var which = policy_gov_mod }
		set_variable = { which = arg2_var value = 2 }
		round_value_to_decimal = yes
		set_variable = { which = policy_gov_mod which = arg1_var }

		set_variable = { which = arg1_var which = policy_gov_gui_val }
		set_variable = { which = arg2_var value = 1 }
		round_value_to_decimal = yes
		set_variable = { which = policy_gov_gui_val which = arg1_var }
	}
}

# Scope: country
# Advisor level cannot be exported as a variable so we have to
# find it with like this. Only call if master of mint advisor is hired
#
get_mint_advisor_lvl = {

	# Cannot use a trigger switch here because
	# for some odd reason the game crashes when we do

	if = { limit = { master_of_mint = 5 }
		set_variable = { which = output_var value = 5 }
	}
	else_if = { limit = { master_of_mint = 4 }
		set_variable = { which = output_var value = 4 }
	}
	else_if = { limit = { master_of_mint = 3 }
		set_variable = { which = output_var value = 3 }
	}
	else_if = { limit = { master_of_mint = 2 }
		set_variable = { which = output_var value = 2 }
	}
	else_if = { limit = { master_of_mint = 1 }
		set_variable = { which = output_var value = 1 }
	}
}
