
##################################
# EVE - National Scripts
##################################

# Fired from province that stops being a nation's capital
# @scope capital
#
capital.lose_status = {

	capital.remove_modifiers = yes

	owner = {
		ROOT = { core.export_var_to_prev = { var = owner_id } }

		# This province was gained as a concession in a war or
		# for other reasons has ended up as territory of another country
		if = {
			limit = { is_var_not_equal_to = { var1 = output var2 = country_id } }

			# Find capital province previous owner.
			# If previous owner is not found then he has been annexed.
			# Normally we would do this by using 'previous_owner' variable,
			# but for some reason it gets set to null after loading a campaign

			every_known_country = {
				limit = {
					# output variable will be set to -1 if country is found
					NOT = { PREV = { is_variable_equal = { which = output value = -1 } } }
				}
				PREV = { core.export_var_to_prev = { var = output } }	# capital owner_id
				if = {
					limit = { is_variable_equal = { which = output which = country_id } }
					PREV = { set_variable = { which = output value = -1 } }	# break loop
					capital.changed_province = yes
				}
			}
			# Update previous capital province
			ROOT = {
				province.set_owner_id = yes

				# Do not do anything further if this has already been done
				# by owner when checking for territorial change
				if = {
					limit = { NOT = { has_province_flag = conquered_capital } }
					autonomy.call_for_province_update = yes
					capital_scope = { core.fire_monthly_pulse = yes }
				}
				else = { clr_province_flag = conquered_capital }
			}
		}
		# Owner changed its capital province with diplomatic power or an event
		else = { capital.changed_province = yes }
	}
}

# Called after a country moves its capital
# @scope country
#
capital.changed_province = {

	capital.init = yes
	set_country_flag = territorial_change
	core.fire_monthly_pulse = yes
}

# Apply all capital modifiers in capital province
# @scope country
#
capital.init = {

	capital_scope = {
		add_province_triggered_modifier = capital_province
		add_province_modifier = { name = prov_nation_capital duration = -1 }
	}
}

# Remove all capital modifiers from capital province
# @scope capital
#
capital.remove_modifiers = {

	if = {
		limit = { has_province_modifier = capital_province }

		remove_province_triggered_modifier = capital_province
		remove_province_modifier = prov_nation_capital
	}
	else = { logger.print_error = { id = 309 } }
}
